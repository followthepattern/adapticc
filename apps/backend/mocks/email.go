// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	smtp "net/smtp"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmail is a mock of Email interface.
type MockEmail struct {
	ctrl     *gomock.Controller
	recorder *MockEmailMockRecorder
}

// MockEmailMockRecorder is the mock recorder for MockEmail.
type MockEmailMockRecorder struct {
	mock *MockEmail
}

// NewMockEmail creates a new mock instance.
func NewMockEmail(ctrl *gomock.Controller) *MockEmail {
	mock := &MockEmail{ctrl: ctrl}
	mock.recorder = &MockEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmail) EXPECT() *MockEmailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmail) Send(addr string, a smtp.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", addr, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailMockRecorder) Send(addr, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmail)(nil).Send), addr, a)
}

// SetFrom mocks base method.
func (m *MockEmail) SetFrom(from string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFrom", from)
}

// SetFrom indicates an expected call of SetFrom.
func (mr *MockEmailMockRecorder) SetFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFrom", reflect.TypeOf((*MockEmail)(nil).SetFrom), from)
}

// SetHTML mocks base method.
func (m *MockEmail) SetHTML(html []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTML", html)
}

// SetHTML indicates an expected call of SetHTML.
func (mr *MockEmailMockRecorder) SetHTML(html interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTML", reflect.TypeOf((*MockEmail)(nil).SetHTML), html)
}

// SetSubject mocks base method.
func (m *MockEmail) SetSubject(subject string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubject", subject)
}

// SetSubject indicates an expected call of SetSubject.
func (mr *MockEmailMockRecorder) SetSubject(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubject", reflect.TypeOf((*MockEmail)(nil).SetSubject), subject)
}

// SetText mocks base method.
func (m *MockEmail) SetText(text []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetText", text)
}

// SetText indicates an expected call of SetText.
func (mr *MockEmailMockRecorder) SetText(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetText", reflect.TypeOf((*MockEmail)(nil).SetText), text)
}

// SetTo mocks base method.
func (m *MockEmail) SetTo(to []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTo", to)
}

// SetTo indicates an expected call of SetTo.
func (mr *MockEmailMockRecorder) SetTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTo", reflect.TypeOf((*MockEmail)(nil).SetTo), to)
}
