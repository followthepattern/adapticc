stages:
  - build
  - deploy

build frontend:
  image: node:lts-alpine
  stage: build
  variables:
    CI_PROJECT_DIR_FRONTEND: ${CI_PROJECT_DIR}/apps/frontend

  script:
    - cd ${CI_PROJECT_DIR_FRONTEND}
    - npm install
    - npm run build

  artifacts:
    paths:
      - ${CI_PROJECT_DIR_FRONTEND}/dist
    expire_in: 1 hour
  
  only:
    - tags

deploy frontend:
  stage: deploy
  variables:
    DISTRIBUTION_ID: E2KM8EMXSNFJ4Y
    WWW_DISTRIBUTION_ID: E3T1ME5XK3W76I
    CI_PROJECT_DIR_FRONTEND: ${CI_PROJECT_DIR}/apps/frontend

  tags:
    - ftp
    
  script:
    - aws s3 sync ${CI_PROJECT_DIR_FRONTEND}/dist s3://adapticc
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" > /dev/null
    - aws cloudfront create-invalidation --distribution-id $WWW_DISTRIBUTION_ID --paths "/*" > /dev/null
  
  dependencies:
    - build frontend
  
  only:
    - tags

build backend:
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  variables:
    CI_PROJECT_DIR_BACKEND: ${CI_PROJECT_DIR}/apps/backend

  stage: build

  script:
    - TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - /kaniko/executor
      --context "${CI_PROJECT_DIR_BACKEND}"
      --dockerfile "${CI_PROJECT_DIR}/ci/images/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${TAG}"

deploy backend:
  stage: deploy

  variables:
    MODE: prod

  tags:
    - ftp

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - ${CI_PROJECT_DIR}/ci/deploy.sh